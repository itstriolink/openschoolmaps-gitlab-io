stages:
- build
- pages

PDFs:
  image: asciidoctor/docker-asciidoctor:latest
  stage: build
  variables:
    LANG: de_CH.utf8
  tags:
  - docker
  script:
  - set -e
  - for f in $(find ./lehrmittel/ -name '*.adoc');
    do
      asciidoctor-pdf
        --attribute icons=font
        --attribute source-highlighter=coderay
        $f;
    done
  - for f in $(grep -rl 'def::show_solutions\[' lehrmittel/ | grep '.adoc$');
    do
      asciidoctor-pdf
        --attribute icons=font
        --attribute source-highlighter=coderay
        --attribute show_solutions
        $f
        -o ${f%.*}_solutions.pdf;
    done
  artifacts:
    expire_in: 3 mos
    paths:
    - lehrmittel/**/*.pdf
    - lehrmittel/**/**/*.pdf
    - lehrmittel/OpenStreetMap Tagging Cheatsheet.docx
    - lehrmittel/OpenStreetMap Tagging Cheatsheet.pdf

QGIS excercise data:
  stage: build
  script:
  # Dummy script,
  # because we only need to collect some files from the Git repo as artifacts.
  - "true"
  artifacts:
    name: "Daten_Leitprogramm_QGIS"
    expire_in: 3 mos
    paths:
    - lehrmittel/einfuehrung_in_qgis/daten_leitprogramm_qgis/

autobahn excercise data:
  stage: build
  script:
  # Dummy script,
  # because we only need to collect some files from the Git repo as artifacts.
  - "true"
  artifacts:
    name: "Daten_autobahn"
    expire_in: 3 mos
    paths:
    - lehrmittel/geodaten-analyse_mit_qgis/vektordaten-analyse_mit_qgis/vektordaten-analyse_mit_qgis_autobahn/

pages:
  image: asciidoctor/docker-asciidoctor
  stage: pages
  script:
  - cd pages/
  - apk update
  - apk add git py2-pip
  - git clone --depth 1 https://github.com/getpelican/pelican-plugins
  - git clone --depth 1 https://gitlab.com/openschoolmaps/pelican-themes.git
  - pip install -r requirements.txt
  - pelican -s publishconf.py
  - mv .well-known/ public/.well-known
  - mv public/ ..
  only:
    refs:
      - master
  artifacts:
    paths:
    - public/
